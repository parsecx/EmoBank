using DAL;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

public partial class frmMovimentoPrelievi : System.Web.UI.Page
{
    SqlHelper cls = new SqlHelper();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            BindMovimentoPrelievi();
        }
    }
    private void HideShowDiv(int i)
    {
        if (i == 1)
        {
            List.Visible = false;
            AddNew.Visible = true;
            lblmsg.InnerText = "";
            //Update.Visible = false;
        }
        else if (i == 0)
        {
            List.Visible = true;
            AddNew.Visible = false;
            //Update.Visible = false;
            ClearInput();
        }
        else if (i == 2)
        {
            List.Visible = false;
            AddNew.Visible = false;
            //Update.Visible = true;
        }

    }
    #region MovimentoPrelievi List
    private DataTable BindMovimentoPrelievi()
    {
        DataTable dt = cls.ExecuteDataTable("GetMovimentoPrelievi", null, CommandType.StoredProcedure);
        grdData.DataSource = dt;
        grdData.DataBind();
        return dt;
    }
    public override void VerifyRenderingInServerForm(Control control)
    {
        //
    }

    protected void btnStampa_Click(object sender, EventArgs e)
    {
        int[] a = new int[1];
        a[0] = 0;
        //a[1] = 1;
        ImportExport.ExportToPDF(grdData, "Central Banks", "", a, "A4", true);
    }
    protected void btnNuovo_Click(object sender, EventArgs e)
    {
        HideShowDiv(1); BindDropDowns();

    }
    protected void grdData_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void grdData_RowCommand(object sender, GridViewCommandEventArgs e)
    {

    }
    protected void grdData_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex % 2 != 0)
            {
                e.Row.BackColor = ColorTranslator.FromHtml("#A1DCF2");
            }
            else
            {
                e.Row.BackColor = ColorTranslator.FromHtml("#FFFFFF");
            }
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                //e.Row.Cells[i].Attributes.Add("onclick", "Chk('" + e.Row.Cells[i].Text + "');");
                e.Row.Cells[i].Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grdData, "Select$" + e.Row.RowIndex);
                e.Row.Cells[i].ToolTip = "Click to view detail.";
                e.Row.Cells[i].Attributes.Add("style", "cursor:pointer");
            }
            //e.Row.Attributes["onclick"] = Page.ClientScript.GetPostBackClientHyperlink(grdData, "Select$" + e.Row.RowIndex);

            //e.Row.Cells[0].Attributes["onclick"] = "";
        }
    }
    protected void grdData_Sorting(object sender, GridViewSortEventArgs e)
    {
        string sortingDirection = string.Empty;
        if (dir == SortDirection.Ascending)
        {
            dir = SortDirection.Descending;
            sortingDirection = "Desc";
        }
        else
        {
            dir = SortDirection.Ascending;
            sortingDirection = "Asc";
        }

        DataView sortedView = new DataView(null);
        sortedView.Sort = e.SortExpression + " " + sortingDirection;
        grdData.DataSource = sortedView;
        grdData.DataBind();
    }
    public SortDirection dir
    {
        get
        {
            if (ViewState["dirState"] == null)
            {
                ViewState["dirState"] = SortDirection.Ascending;
            }
            return (SortDirection)ViewState["dirState"];
        }
        set
        {
            ViewState["dirState"] = value;
        }
    }

    protected void grdData_PageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        grdData.PageIndex = e.NewPageIndex;

    }
    #endregion

    #region Add New Record
    private void BindDropDowns()
    {
        GetSamplingPoints(); GetAnimalSpecies(); GetDonators();
    }
    protected void btnRegister_Click(object sender, EventArgs e)
    {
        int CodIdDonor = 0;
        string Type;
        if (btnRegister.Text.Trim() == "Registra")
        {
            Type = "S";
        }
        else
        {
            Type = "U";
        }

        if (Validation())
        {
            if (hdNewDonor.Value == "1")
            {
                SqlParameter[] Opare =
            {
             //new SqlParameter("@ProtocolNumber",txtProtocollo.Text),
             //new SqlParameter("@Progressive",txtProgressivo.Text),
             new SqlParameter("@Name",txtDenominazione.Text),
             new SqlParameter("@Address",txtDIndirzzo.Text),
             new SqlParameter("@Resort",txtDLocalita.Text),
             new SqlParameter("@Province",txtDProvincia.Text),
             new SqlParameter("@PostalCode",txtDCap.Text),
             new SqlParameter("@Phone",txtDTelefono.Text),
             new SqlParameter("@email",txtDE_mail.Text),
             new SqlParameter("@Note","-"),
               //new SqlParameter("@Rval",ParameterDirection.ReturnValue)
              };
                int rval = cls.ExecuteNonQuery("Save_Emobank_Donors", Opare, CommandType.StoredProcedure);
                if (rval > 0)
                {
                    CodIdDonor = rval;
                }
            }
            else
            {
                CodIdDonor = Convert.ToInt32(ddlDenominazione.SelectedValue);
            }


            SqlParameter[] Opara =
            {
             //new SqlParameter("@ProtocolNumber",txtProtocollo.Text),
             //new SqlParameter("@Progressive",txtProgressivo.Text),
             new SqlParameter("@DateTimeDrawing",txtDatePrelievo.Text),
             new SqlParameter("@CodeIDSamplingPoint",ddlPuntoPrelievo.SelectedValue),
             new SqlParameter("@OperatorWithdrawal",""),
             new SqlParameter("@TypePrepared",ddlTipoPreparato.SelectedValue),
             new SqlParameter("@GrossWeightPrepared",txtPesoLordo.Text),
             new SqlParameter("@Preparation",""),
             new SqlParameter("@ProductExpirationDate",txtDataScadenza.Text),
             new SqlParameter("@CompositionVolumeAnticoagulant",txtComposizione.Text),
             new SqlParameter("@AnimalGroupBlood",txtGruppoSangue.Text),
             new SqlParameter("@ModeStorageTemp",txtConservazione.Text),
             new SqlParameter("@IndicationAnimalSpecies",ddlSpecieAnimale.SelectedValue),
             new SqlParameter("@CodIDDonors",CodIdDonor.ToString()),
             new SqlParameter("@UserInsert",Session["UserId"]),
             new SqlParameter("@DateTimeUserInsert",""),
             new SqlParameter("@Barcode","122222"),
             //new SqlParameter("@UserLoadBloodBankRefrigerator",)
             //new SqlParameter("@DateLoadBloodBankRefrigerator",)
             //new SqlParameter("@CodIDBankRefrigerator",)
             //new SqlParameter("@CodeIDReqVeterinaryClinic",)
             //new SqlParameter("@DateRequestClinic",)
             //new SqlParameter("@UserAcquisitionRequest",)
             //new SqlParameter("@DateAcquisitionRequest",)
             //new SqlParameter("@UserDrainBloodBankRefrigerator",)
             //new SqlParameter("@DatedrainBloodBankRefrigerator",)
             //new SqlParameter("@DateTrasmissionClinicaL",)
             //new SqlParameter("@NumberProtocolTrasmissionClinical",)
             //new SqlParameter("@DateReceiptClinic",)
             
               new SqlParameter("@CodID",ltrID.Text),
             new SqlParameter("@Type",Type),
             new SqlParameter("@Rval",ParameterDirection.ReturnValue)

            };
            int Rval = cls.ExecuteNonQuery("MovimentoPrelieviSave", Opara, CommandType.StoredProcedure);
            if (Rval > 0)
            {
                HideShowDiv(0);

            }



        }



    }
    public bool Validation()
    {

        return true;
    }
    protected void btnBack_Click(object sender, EventArgs e)
    {
        HideShowDiv(0);
    }
    #endregion
    #region Update Record


    protected void btnBackUp_Click(object sender, EventArgs e)
    {
        HideShowDiv(0);
    }
    protected void btnUpdate_Click(object sender, EventArgs e)
    {

    }
    #endregion


    #region Bind Dropdowns
    private DataTable GetSamplingPoints()
    {
        DataTable dt = cls.ExecuteDataTable("GetSamplingPoints", null, CommandType.StoredProcedure);
        ddlPuntoPrelievo.DataSource = dt;
        ddlPuntoPrelievo.DataTextField = "Description";
        ddlPuntoPrelievo.DataValueField = "CodID";
        ddlPuntoPrelievo.DataBind();
        ddlPuntoPrelievo.Items.Insert(0, new ListItem("--Select Punto Prelievo--", "0"));
        return dt;
    }
    private DataTable GetAnimalSpecies()
    {
        DataTable dt = cls.ExecuteDataTable("Select * from Emobank_AnimalSpecies", null, CommandType.Text);
        ddlSpecieAnimale.DataSource = dt;
        ddlSpecieAnimale.DataTextField = "SpeciesName";
        ddlSpecieAnimale.DataValueField = "SpeciesCode";
        ddlSpecieAnimale.DataBind();
        ddlSpecieAnimale.Items.Insert(0, new ListItem("--Select Specie Animale--", "0"));
        return dt;
    }
    private DataTable GetDonators()
    {
        DataTable dt = cls.ExecuteDataTable("GetDonators", null, CommandType.Text);
        ddlDenominazione.DataSource = dt;
        ddlDenominazione.DataTextField = "Name";
        ddlDenominazione.DataValueField = "CodID";
        ddlDenominazione.DataBind();
        if (dt.Rows.Count > 0)
        {
            ddlDenominazione.Items.Insert(0, new ListItem("--Select Denominazione--", "0"));
        }
        else
        {
            ddlDenominazione.Items.Insert(0, new ListItem("--Dati non disponibili--", "0"));
        }
        return dt;
    }
    #endregion
    protected void ddlPuntoPrelievo_SelectedIndexChanged(object sender, EventArgs e)
    {
        SqlParameter[] oPera =
        {
            new SqlParameter("@CodId",ddlPuntoPrelievo.SelectedValue)
        };
        DataTable dt = cls.ExecuteDataTable("GetSamplingPointById", oPera, CommandType.StoredProcedure);
        if (dt.Rows.Count > 0)
        {
            txtIndirzzo.Text = dt.Rows[0]["Address"].ToString();
            txtLocalita.Text = dt.Rows[0]["resort"].ToString();
            txtCap.Text = dt.Rows[0]["PostalCode"].ToString();
            txtE_mail.Text = dt.Rows[0]["Email"].ToString();
            txtTelefono.Text = dt.Rows[0]["Phone"].ToString();
            txtProvincia.Text = dt.Rows[0]["province"].ToString();
            txtReferente.Text = dt.Rows[0]["Contactperson"].ToString();

        }
    }
    protected void ddlDenominazione_SelectedIndexChanged(object sender, EventArgs e)
    {
        SqlParameter[] oPera =
        {
            new SqlParameter("@CodId",ddlDenominazione.SelectedValue)
        };
        DataTable dt = cls.ExecuteDataTable("GetDonatorsById", oPera, CommandType.StoredProcedure);
        if (dt.Rows.Count > 0)
        {
            txtDIndirzzo.ReadOnly = false;
            txtDLocalita.ReadOnly = false;
            txtDCap.ReadOnly = false;
            txtDE_mail.ReadOnly = false;
            txtDTelefono.ReadOnly = false;
            txtDProvincia.ReadOnly = false;
            txtDenominazione.ReadOnly = false;

            txtDIndirzzo.Text = dt.Rows[0]["Address"].ToString();
            txtDLocalita.Text = dt.Rows[0]["resort"].ToString();
            txtDCap.Text = dt.Rows[0]["PostalCode"].ToString();
            txtDE_mail.Text = dt.Rows[0]["Email"].ToString();
            txtDTelefono.Text = dt.Rows[0]["Phone"].ToString();
            txtDProvincia.Text = dt.Rows[0]["province"].ToString();
        }
        hdNewDonor.Value = "0";
        txtDIndirzzo.ReadOnly = true;
        txtDLocalita.ReadOnly = true;
        txtDCap.ReadOnly = true;
        txtDE_mail.ReadOnly = true;
        txtDTelefono.ReadOnly = true;
        txtDProvincia.ReadOnly = true;
        txtDenominazione.ReadOnly = true;
    }
    protected void btnDonatorNuovo_Click(object sender, EventArgs e)
    {
        ClearInput();
    }
    public void ClearInput()
    {
        txtCap.Text = string.Empty;
        txtCInterno.Text = string.Empty;
        txtCodice.Text = string.Empty;
        txtComposizione.Text = string.Empty;
        txtConservazione.Text = string.Empty;
        txtDataScadenza.Text = string.Empty;
        txtDatePrelievo.Text = string.Empty;
        txtE_mail.Text = string.Empty;
        txtGruppoSangue.Text = string.Empty;
        txtIndirzzo.Text = string.Empty;
        txtLocalita.Text = string.Empty;
        txtPesoLordo.Text = string.Empty;
        txtProgressivo.Text = string.Empty;
        txtProtocollo.Text = string.Empty;
        txtProvincia.Text = string.Empty;
        txtReferente.Text = string.Empty;
        txtTelefono.Text = string.Empty;
        ddlPuntoPrelievo.SelectedIndex = 0;
        ddlSpecieAnimale.SelectedIndex = 0;
        ddlTipoPreparato.SelectedIndex = 0;
        ddlDenominazione.SelectedIndex = 0;
        hdNewDonor.Value = "0";
        txtDIndirzzo.Text = "";
        txtDLocalita.Text = "";
        txtDCap.Text = "";
        txtDE_mail.Text = "";
        txtDTelefono.Text = "";
        txtDProvincia.Text = "";
        txtDenominazione.Text = "";

        txtDIndirzzo.ReadOnly = false;
        txtDLocalita.ReadOnly = false;
        txtDCap.ReadOnly = false;
        txtDE_mail.ReadOnly = false;
        txtDTelefono.ReadOnly = false;
        txtDProvincia.ReadOnly = false;
        txtDenominazione.ReadOnly = false;
    }
}